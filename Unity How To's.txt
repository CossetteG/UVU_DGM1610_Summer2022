"C:\Users\cosse\Documents\GitKraken Files\UVU_DGM1610_Summer2022\New Unity Project\Assets\UnityProject1.unity"
^the location of my Unity Project

Code Words for C # in Unity

//base
using UnityEngine;
using System.Collections;

public class NewBehaviourScript : MonoBehaviour {
    //the public class MonoBehaviour is like the Main class- it is the class to call to

    // Use this for initialization
    void Start () {
    
    }
    
    // Update is called once per frame
    void Update () {
    
    }
}

//to use in an update class:
//input keyboard info and edit rendering info
    if (Input.GetKeyDown(KeyCode.R))
        {
            GetComponent<Renderer> ().material.color = Color.red;
        }

//writes stuff
Debug.Log("words to write"); 


Scripts
Scripts is where you'll put behavior code for an object. 
an object will obey a script only if that script is applied to the object
To create a new script: Assets > Create > New C # Script 
The class name and the file name must be the same to enable the script component to be attached to a GameObject
A script won't run unless it's attached to a GameObject

Variable Note: (declaration) = (initialization);

Functions
public class VariablesAndFunctions : MonoBehaviour
{   
    int myInt = 5;
    //this is the initial declaration of the int myInt
    
    void Start ()
    //this function runs upon starting. void means no return
    {
        myInt = MultiplyByTwo(myInt);
        //redeclaring myInt to = calling the function MultiplyByTwo using the original myInt
        Debug.Log (myInt);
        //write what the new myInt equals
    }
    
    
    int MultiplyByTwo (int number)
    //new function called MultiplyByTwo. int means return an int; declared temporary int to use in the function
    {
        int result; //new integer specifically to be the result
        result = number * 2; //performing operation
        return result; //using the word return to return the integer it came up with and make the call work
    }
}
//this script should write 10 

Comments and Disablers
//single line 
/* multiple line */

Classes are like custom components 
you can attach a script by dragging the script asset to a Game Object in the hierarchy panel or to the 
inspector of the Game Object that is currently selected
Or you can go the the Component Menu > Scripts
Variables with in a class can be edited with the component editor just like any other component. 
Edit variables in the inspector
To see a variable within the inspector, decalre it as public
Unity capitalizes things sometimes? (m_, k, _, Capitalizes, adds spaces between capitals, adds spaces between acronyms)

I skipped prefab bc brain hurt and also idk wtf a prefab is (pre-fabricated asset maybe?)

Order of Execution:
start:
Initialization > Physics > Input events > Game Logic > Scene, Gizmo, GUI Rendering > End of Frame, Pause, Update Loops, Decommissioning
functions: 
Awake, OnEnable, Reset, OnValidate, Start, OnApplicationPause, 
FixedUpdate (independent of frames), Update (1x per frame), Late Update (after Update),  
animations: 
OnStateMachineEnter, OnStateMachineUpdate, OnStateMachineExit, FireAnimationEvents, On AnimatorMove, StateMachineBehaviour(OnStateMove), WriteProperties
rendering: 
OnPreCull, OnBecameVisible/OnBecameInvisible, OnWillRenderObject, OnPreRender, OnRenderObject, OnPostRender, OnRenderImage, OnGUI, OnDrawGizmos
coroutines (yield):
yield, yield WaitForSeconds, yield WaitForFixedUpdate, yield WWW, yield StartCoroutine
end:
OnDestroy, OnApplicationQuit, OnDisable

use Update for animations and character movement
use FixedUpdate for physics engines 
use LateUpdate for cameras

Coroutines allow you to spread tasks across several frames
It’s best to use coroutines if you need to deal with long asynchronous operations,
 such as waiting for HTTP transfers, asset loads, or file I/O to complete.
Courotines are good for animations 


This is a normal code to fade an opacity (alpha) down to 0:
void Fade()
{
    Color c = renderer.material.color;
    for (float alpha = 1f; alpha >= 0; alpha -= 0.1f)
    {
        c.a = alpha;
        renderer.material.color = c;
    }
}
you would have to call an Update function to get this to work
Here is a corotine code to do the same thing:
IEnumerator Fade()
{
    Color c = renderer.material.color;
    for (float alpha = 1f; alpha >= 0; alpha -= 0.1f)
    {
        c.a = alpha;
        renderer.material.color = c;
        yield return null;
    }
}

And this is how you would call it:
void Update()
{
    if (Input.GetKeyDown("f"))
    {
        StartCoroutine(Fade());
    }
}

Corotines are declared with IEnumerator and return type is yield
The yield return nullline is the point where execution pauses and resumes in the following frame
Unity will run a coroutine after a yield statement, ie "yield return new WaitForSeconds(.1f);
this is useful to edit how often a fucntion runs

Be careful about not using the same name for different things
using (Classname); will give you access in everything in that class and be equivalent to saying Classname.Variablename everytime

Null Reference- refer back to the manual lol
Sometimes you'll reference a variable that was not initialized or you'll initialize a variable that you do not use
there are ways to catch this but Unity will usually tell you:
NullReferenceException: Object reference not set to an instance of an object
  at Example.Start () [0x0000b] in /Unity/projects/nre/Assets/Example.cs:10 


IMPORTANT CLASSES 
GameOjbect: Represents the type of objects which can exist in a Scene
MonoBehaviour:The base class from which every Unity script derives
Object: The base class for all objects that Unity can reference in the editor
Transform: Provides you with a variety of ways to work with a GameObject’s position, rotation and scale via script, as well as its hierarchical relationship to parent and child GameObjects.
Vectors: Classes for expressing and manipulating 2D, 3D, and 4D points, lines and directions.
Quaternion: A class which represents an absolute or relative rotation, and provides methods for creating and manipulating them.
ScriptableObject: A data container that you can use to save large amounts of data.
Time (and framerate management): The Time class allows you to measure and control time, and manage the framerate of your project.
Mathf: A collection of common math functions, including trigonometric, logarithmic, and other functions commonly required in games and app development.
Random: Provides you with easy ways of generating various commonly required types of random values.
Debug: Allows you to visualise information in the Editor that may help you understand or investigate what is going on in your project while it is running.
Gizmos and Handles: allows you to draw lines and shapes in the Scene view
 and Game view, as well as interactive handles and controls.

https://uvu.instructure.com/courses/537783/pages/read-scripting-essentials-and-important-classes?module_item_id=9945146
for more info on class types

