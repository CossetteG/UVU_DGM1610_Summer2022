# UVU_DGM1610_Summer2022
Scripting for Gaming and Animation

I may just use this page to keep track of my notes teehee
I have taken this class before so I have most of the software downloaded 
but it was during COVID and I was taking too many classes at the time and I hella failed it
I think I'll do better this time :)

ok so when you click on a committed file, it'll open it up and you can read what it says
you can also see all the files in this commit to the right
to make a new file, you can right click on the files box where it's empty and just make a new file
to edit an existing file, right click on it

when you're editing file contents, make an initial change and then save it with ctrl save
this will put the file into WIP mode, Unstaged but editable 
This is called a File Diff
then make all your changes 
when you're done editing, stage and commit and push

Always save your file before exiting out of it, but Git will prompt you
To edit a Diff, you'll click to view it, and then hit Edit File to make another change

what happens if you make a mistake?

You can undo a commit or a staging (or maybe even a push idk) by using the fancy little undo button. 
You can unstage certain lines if you just want to get rid of them
or you can go into the text and just edit it as if it was never committed

Now I'm going to simulate a pull function
These lines were written in Git Hub
To get here, I went to GitHub- this repo- Code- this file- and Edit with the little pencil icon

Then in Git Kraken, I use Fetch (under Pull) to check for new files from Git Hub, and Then Pull to add them to my repo

Now we're going to branch?

This change was made in the secondary branch. this way we can make changes and pull requests without corrupting the original file
To merge this branch to the main branch, you can just drag and drop them together, and then push it

SIKE it actually merged into the Main branch so we're good lol

I tried to change the name and now I have two files so now I'm going to delete notes and just make a new notes file
There it is

Learning Git: without GitHub or Git Kraken, using Git Terminal
    Download Git from git-scm.com 
    update it by opening the terminal and writing https://gitgithub.com/git/git 
    "git init" will create a new repo 
    "git status" will show you what files you have in your repository
    "git add <file name>" 
    "git commit -m "<commit message>" " to commit the currect version of your file
    "git branch <branch name>" will create a new branch in git
    "git branch" will show you all the branches that git currently has 
    "git checkout <branch name>" wil make it so you're working in that branch's version of the files
    "git checkout -b <branch name>" will create a branch and switch to it
    "git add ." will add everything you have changed to the branch
    "git commit -n "commit message" "to make a commit
    "git merge <branch name>" will merge the branch you mentioned to the branch you're currently in 
    "git branch <branch name> -d" will delete the branch
    "git branch <branch name> - D" will force delete the branch
    "git log" shows us all our commits
        copy whichever git ID you need to use
    "git revert <commit ID>" will undo your work until that specific version of it

    to make something git won't see 
        create a new document called .gitignore
        within .gitignore, put /<folder name> to tell git to ignore that folder and
        write the file name to tell git to ignore that file

    If you want git to ignore a file it already has commits for, you'll need to delete cache first
    "git rm --cached <file name>"
    then add the file to .gitignore

GitHub tutorials
    creating repositories
    "git add remote origin <URL of Git Repo>.git" will clone and connect the online and local repositories
    "git push origin <branch name>"
        it will prompt you for login info
    to make a new commit:
        stage with git add .
        commit with git commit -m "commit message"
        push with git push -u origin master
        username and password

    ReadMe files: welcome and rules and organization for your repository
    Git clone (pulling)
    open the repo you want
    copy the repo link
    "git clone <github URL>"

that guy's voice was annoying smh

Links!!
https://github.com/anthonyromrell/CSharpEssentials (.)
https://dotnetfiddle.net/ 
w3schools.com/cs/cs_intro.php

Class:
    public class ClassExample
        C Sharp is object oriented
        public - keyword, meaning accessible
        class declares a class
        ClassExample is just the name of the class
        denote a class by putting curly brackets underneath:
    public class ClassExample
    {
        public int number;
    }
        now we fill the object with variables
        int is integer, a number value
        number is the name of the variables
        always end your lines with a ;

void means no return. to be used in functions. 

Names are one word only
Class names start with capital letters
Variable names start with lowercase letters
both use CamelCasing
functions go within classes alongside variables
to declare that it is a function, it needs () after it, then you put curly brackets underneath to tell the function what to do
a function declaration is the top line (), a funtcion call is the body of the function {}

public class Health
{
    public int healthNum;
    public int strengthNum;
}

public means it can be veiwed from anywhere
int is a number variables
"healthNum" and "strengthNum" are variable names

public class Character
{
    public Health playerHealth;

    public void RunExample()
    {
        Console.WriteLine("Hello World");
    }
}

You can put one class in another and it registers as an object
example of a function

public class Weapons
{
    public int ammoCount = 10;
    public string weaponName = "Mini Gun"
    public float firePower = 11.5f; 
}

string is a abc variable
a float is a numeric variable with a decimal 
float variables always come in units of f

using System;

public class Program
{
    public Weapon miniGun;

    public void Main()
    {
        miniGun = new Weapon();
        Console.WriteLine(miniGun.weaponName + "has an ammo count of" + miniGun.ammoCount);
    }
}

Weapon is the object
the first line only declares the object
within the function is the connector from miniGun to the Weapon body
+ can string together sentences, just an and

public class Program
{
    public Weapon miniGun;
    public PowerUp WeaponPowerUp;

    public void Main()
    {
        miniGun = new Weapon();
        miniGun.ammoCount++;

        WeaponPowerUp = new PowerUp;
        miniGun.firePower += WeaponPowerUp.powerLevel;*

        Console.WriteLine(miniGun.weaponName + "has an ammo count of" + miniGun.ammoCount);
        Console.WriteLine("Firepower is now" + miniGun.firePower);
    }
}

++ operaters will add 1 to your numeric variable
-- subtracts one
miniGun.ammoCount = 30 will change the value to 30
+= will add however many more
-= will subtract however many more
The long way to do this is:
miniGun.ammoCount = miniGun.ammoCount + 40; 

public class PowerUp
{
    public float powerLevel = 2.5f;
}

(added powerup stuff)
you can pull info from other classes easy
*name of the object . name of the variable in its class, add to it: name of the object . name of the variable within its class

Types of variables
    int - whole numbers and negative whole numbers - 4 bytes
        int myNum = 5;
    long - whole numbers but they're bigger/ negative numbers but they're smaller - 8 bytes
        long myLongNum = 10L;
    float - decimal numbers - 4 bytes
        float myFloatyBoi = 5.5F;
    double - decimal numbers, but with more decimal places - 8 bytes  
        double myBadonkerSize = 12.21D;
    floats and doubles may also be scientific numbers like 12e4 (120000)
    char - single character with single quotes - 2 bytes
        char myLetter = 'D';
    string - text with normal quotes- 2 bytes per characters
        string myWords = "ahh no betrayal";
    bool - a value that is either true or false - 1 bit
        bool myBool = true;

Syntax:
type(of variable) variableName = value; -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    string name = "Black*Star";
    int myNum = 1;
Console.WriteLine(whatever you're writing lol + whatever else you wanna say haha);
    Console.WriteLine(myNum)
    Console.WriteLine("A human called me a possom. I am not a possom")
variableName = value; (after you've declared it once)
    myNum = 8;
    (variables will = the latest declared value)

Operators
do stuff with the variables (subject and predicate deal)
type variableName (operator) value or other variable [(operater) value or other variable]
    int value0 = 10;
    int value1 = 100 + 50;
    int value2 = value1 + 30;
    int value3 = value1 + value2;
    int value0 ++;
    int value1 += 50;

    int value4 = 4;
    int value5 = 2 + 2;
    Console.WriteLine(value4 == value5);
    //returns true because they are equal

    (value4 == value5 && value4 != 0)
    //returns true, because value4 is equal to value5 AND value4 is not equal to 0

Arithmetic Operators
    + Adds together two values;
    - subtracts one value from another;
    * multiplies two values;
    / divides one value from another;
    % (Modulus) returns the division remainder;
    ++ (Increment) Increases the Value by one;
    -- (Decrement) Decreases the Value by one;
Assignment Operators 
    = assigns a value;
    += adds a value to a variable;
    -= subtracts '';
    *= multiplies '';
    /= divides '';
    %= modules '';
    &= witchcraft. will make your numbers smaller, likley go to 0. values are interchangeable AND
    |= also witchcraft. will make your number some value up to the += value. OR
        these have to do with the number in binary as well as AND and OR logical statements.
        they are inverses of eachother
    ^= Sorcery, but numbers come in triplets (in 9, 16, 25, any two will return the other) triangle bitch
    >>= Shrink Ray. responds well to exponetial relationships
    <<= Growth Ray. greater than addition but less than exponetial
Comparison Operators (will return true or false)
    == is equal to;
    != is not equal to;
    > greater than;
    < less than;
    >= greater than or equal to;
    >= less than or equal to;
Logical Operators (returns true or false)
    && AND / true if both statements are true;
    || OR / true if either statement is true;
    ! NOT / uno reverse card

Commas can be used anywhere where one variable is expected to put multiple variables in
    int x = 4, y = 5, z = 3;
    Console.WriteLine(x, y, z);
















